
services:

  ocr:
    container_name: ocr
    image: acrdetectaideveastus.azurecr.io/detectai-ocr:${AI_BUILD_ID}
    volumes:
      - ../../models/image/ocr/tessdata:/app/tessdata
    environment:
      - LOCAL_ENV=${LOCAL_ENV}
      - TESSDATA_PREFIX=${TESSDATA_PREFIX}
    ports:
      - 5003:5003
    restart: always
    networks:
      - network

  nsfw:
    container_name: nsfw
    image: acrdetectaideveastus.azurecr.io/detectai-nsfw:${AI_BUILD_ID}
    volumes:
      - ../../models/image/nsfw:/app/models
    environment:
      - LOCAL_ENV=${LOCAL_ENV}
      - USE_ONNX=YES
    ports:
      - 5009:5009
    restart: always
    networks:
      - network

  image_tagger:
    container_name: image_tagger
    image: acrdetectaideveastus.azurecr.io/detectai-image_tagger:${AI_BUILD_ID}
    volumes:
      - ../../models/image/image_tagger:/image_tagger/models
    environment:
      - LOCAL_ENV=${LOCAL_ENV}
      - USE_ONNX=YES
    ports:
      - 5011:5011
    restart: always
    networks:
      - network

  image_captioning:
    container_name: image_captioning
    image: acrdetectaideveastus.azurecr.io/detectai-image_captioning:${AI_BUILD_ID}
    volumes:
      - ../../models/image/image_captioning:/image_captioning/models
    environment:
      - LOCAL_ENV=${LOCAL_ENV}
      - USE_ONNX=YES
    ports:
      - 5010:5010
    restart: always
    networks:
      - network

  
  nginx:
    container_name: nginx
    image: nginx:1.25.1
    volumes:
      - ../../docker/configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../../docker/configs/nginx/certs:/etc/nginx/certs
    ports:
      - "8080:80"
      - "80:80"
      - "443:443"
    depends_on:
      - ocr
      - nsfw
      - image_tagger
      - image_captioning
    restart: always
    networks:
      - network

networks:
  network:
