# nginx/conf.d/default.conf
# Merged configuration for both Claude.ai and ChatGPT MCP servers

# HTTP server - redirect to HTTPS and handle Let's Encrypt
server {
    listen 80;
    listen [::]:80;
    server_name data.forensic-bot.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name data.forensic-bot.com;
    merge_slashes on;

    # Note: edge guard removed to avoid 'if not allowed here' errors.
    # The application enforces OAuth on /sse.

    # SSL certificates from Let's Encrypt
    ssl_certificate /etc/letsencrypt/live/data.forensic-bot.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/data.forensic-bot.com/privkey.pem;
    
    # Include Let's Encrypt recommended settings
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # =====================================
    # Root endpoint - Service information
    # =====================================
    location = / {
        add_header Content-Type application/json;
        return 200 '{
            "service": "Server Hub",
            "status": "running"
        }';
    }

    # =====================================
    # DEMO Environment (Claude.ai)
    # https://data.forensic-bot.com/demo/sse
    # =====================================
    
    # Health check for demo
    location = /demo/health {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Environment-Path /demo;
    }
    
    # OAuth discovery endpoints for demo (include OIDC openid-configuration)
    location ~ ^/demo/\.well-known/(oauth-authorization-server|oauth-protected-resource|openid-configuration)$ {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Handle OAuth discovery with /sse suffix (Claude.ai quirk)
    location ~ ^/demo/\.well-known/(oauth-authorization-server|oauth-protected-resource|openid-configuration)/sse$ {
        rewrite ^/demo/\.well-known/(.*)/sse$ /demo/.well-known/$1 redirect;
    }

    # Quirk: some clients request root discovery with path suffix "/demo/sse"
    # Map it to the demo-scoped discovery so the correct issuer is used
    location ~ ^/\.well-known/(oauth-authorization-server|oauth-protected-resource)/demo/sse$ {
        return 302 /demo/.well-known/$1;
    }

    # Root-level OAuth discovery (used by Claude) → proxy to DEMO backend with proper env header
    location ~ ^/\.well-known/(oauth-authorization-server|oauth-protected-resource)$ {
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Environment-Path /demo;
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }

    # Quirk: requests like /demo/sse/.well-known/{endpoint} → rewrite to /demo/.well-known/{endpoint}
    location ~ ^/demo/sse/\.well-known/(oauth-authorization-server|oauth-protected-resource)$ {
        return 302 /demo/.well-known/$1;
    }
    
    # Registration endpoint for demo
    location = /demo/register {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Authorization endpoint for demo
    location = /demo/authorize {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Token endpoint for demo
    location = /demo/token {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # SSE endpoint for demo - HEAD/OPTIONS/GET/POST
    location = /demo/sse {
    # App enforces OAuth; no edge guard
        if ($request_method = HEAD) {
            add_header Content-Type text/event-stream;
            add_header Cache-Control no-cache;
            add_header X-Accel-Buffering no;
            add_header Access-Control-Allow-Origin * always;
            add_header X-MCP-Environment demo always;
            return 200;
        }
        if ($request_method = GET) {
            add_header Content-Type text/event-stream;
            add_header Cache-Control no-cache;
            add_header X-Accel-Buffering no;
            add_header Access-Control-Allow-Origin * always;
            add_header X-MCP-Environment demo always;
            return 200;
        }
        
        # Handle OPTIONS for CORS preflight gracefully
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, HEAD, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept' always;
            add_header Access-Control-Max-Age 86400;
            return 204;
        }
        
        # For GET and POST requests
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        
        # Critical for SSE/streaming
        proxy_http_version 1.1;
        
        # Clear connection header for SSE
        proxy_set_header Connection '';
        
        # Disable caching
        proxy_set_header Cache-Control 'no-cache';
        proxy_cache off;
        
        # Disable buffering for SSE - CRITICAL
        proxy_buffering off;
        chunked_transfer_encoding off;
        proxy_request_buffering off;
        
        # Very long timeout for persistent SSE connections
        proxy_read_timeout 24h;
        proxy_send_timeout 24h;
        send_timeout 24h;
        keepalive_timeout 24h;
        
        # SSE-specific headers
        proxy_set_header Accept text/event-stream;
        add_header Content-Type text/event-stream always;
        add_header Cache-Control 'no-cache' always;
        add_header X-Accel-Buffering 'no' always;
        add_header X-MCP-Environment 'demo' always;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers for Claude.ai
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, HEAD, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept' always;
    }
    
    # Messages endpoint for demo
    location = /demo/messages {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        
        # Disable buffering
        proxy_buffering off;
        proxy_cache off;
        
        # Timeouts
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }

    # =====================================
    # CHATGPT Environment
    # https://data.forensic-bot.com/chatgpt/sse
    # =====================================
    
    # Health check for ChatGPT server
    location = /chatgpt/health {
        rewrite ^/chatgpt(/.*)$ $1 break;
        proxy_pass http://mcp-server-chatgpt:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Environment-Path /chatgpt;
    }
    
    # OAuth discovery endpoints for ChatGPT (scoped under /chatgpt)
    location ~ ^/chatgpt/\.well-known/(oauth-authorization-server|oauth-protected-resource|openid-configuration)$ {
        rewrite ^/chatgpt(/.*)$ $1 break;
        proxy_pass http://mcp-server-chatgpt:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Environment-Path /chatgpt;
        
        # CORS headers for ChatGPT
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }

    # Some clients (ChatGPT) probe openid-configuration at ROOT. Keep only OIDC at root
    location = /.well-known/openid-configuration {
        proxy_pass http://mcp-server-chatgpt:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Environment-Path /chatgpt;
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Handle OAuth discovery with /sse suffix (ChatGPT quirk)
    location ~ ^/chatgpt/\.well-known/(oauth-authorization-server|oauth-protected-resource|openid-configuration)/sse$ {
        rewrite ^/chatgpt/\.well-known/(.*)/sse$ /chatgpt/.well-known/$1 redirect;
    }

    # Some clients probe discovery at ROOT /.well-known/* (without /chatgpt). Proxy those to ChatGPT backend
    location ~ ^/\.well-known/(oauth-authorization-server|oauth-protected-resource|openid-configuration)$ {
        # Forward as-is (avoid adding an extra slash before $uri)
        proxy_pass http://mcp-server-chatgpt:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        # Tell backend which environment this discovery is for
        proxy_set_header X-Environment-Path /chatgpt;
        
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }

    # Quirk: requests like /.well-known/{endpoint}/chatgpt/sse → rewrite to /.well-known/{endpoint}
    location ~ ^/\.well-known/(oauth-authorization-server|oauth-protected-resource|openid-configuration)/chatgpt/sse$ {
        return 302 /.well-known/$1;
    }

    # Quirk: requests like /chatgpt/sse/.well-known/{endpoint} → rewrite to /chatgpt/.well-known/{endpoint}
    location ~ ^/chatgpt/sse/\.well-known/(oauth-authorization-server|oauth-protected-resource|openid-configuration)$ {
        return 302 /chatgpt/.well-known/$1;
    }
    
    # Registration endpoint for ChatGPT
    location = /chatgpt/register {
        rewrite ^/chatgpt(/.*)$ $1 break;
        proxy_pass http://mcp-server-chatgpt:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /chatgpt;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Authorization endpoint for ChatGPT
    location = /chatgpt/authorize {
        rewrite ^/chatgpt(/.*)$ $1 break;
        proxy_pass http://mcp-server-chatgpt:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Environment-Path /chatgpt;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Token endpoint for ChatGPT
    location = /chatgpt/token {
        rewrite ^/chatgpt(/.*)$ $1 break;
        proxy_pass http://mcp-server-chatgpt:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /chatgpt;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # SSE endpoint for ChatGPT
    location = /chatgpt/sse {
    # App enforces OAuth; no edge guard
        if ($request_method = HEAD) {
            add_header Content-Type text/event-stream;
            add_header Cache-Control no-cache;
            add_header X-Accel-Buffering no;
            add_header Access-Control-Allow-Origin * always;
            add_header X-MCP-Environment chatgpt always;
            add_header X-MCP-Tools "search,fetch" always;
            return 200;
        }
        
        # Handle OPTIONS for CORS
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, HEAD, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept' always;
            add_header Access-Control-Max-Age 86400;
            return 204;
        }
        
        # For GET and POST requests
        rewrite ^/chatgpt(/.*)$ $1 break;
        proxy_pass http://mcp-server-chatgpt:8008;
        
        # Critical for SSE/streaming
        proxy_http_version 1.1;
        
        # Clear connection header for SSE
        proxy_set_header Connection '';
        
        # Disable caching
        proxy_set_header Cache-Control 'no-cache';
        proxy_cache off;
        
        # Disable buffering for SSE - CRITICAL
        proxy_buffering off;
        chunked_transfer_encoding off;
        proxy_request_buffering off;
        
        # Very long timeout for persistent SSE connections
        proxy_read_timeout 24h;
        proxy_send_timeout 24h;
        send_timeout 24h;
        keepalive_timeout 24h;
        
        # SSE-specific headers
        proxy_set_header Accept text/event-stream;
        add_header Content-Type text/event-stream always;
        add_header Cache-Control 'no-cache' always;
        add_header X-Accel-Buffering 'no' always;
        add_header X-MCP-Environment 'chatgpt' always;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Environment-Path /chatgpt;
        
        # CORS headers for ChatGPT
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, HEAD, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept' always;
    }
    
    # Messages endpoint for ChatGPT (if needed)
    location = /chatgpt/messages {
        rewrite ^/chatgpt(/.*)$ $1 break;
        proxy_pass http://mcp-server-chatgpt:8008;
        
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        
        # Disable buffering
        proxy_buffering off;
        proxy_cache off;
        
        # Timeouts
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /chatgpt;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }

    # =====================================
    # PLACEHOLDER FOR PRODUCTION (Future)
    # =====================================
    # When ready, uncomment and configure:
    #
    # location = /production/sse {
    #     proxy_pass http://mcp-server-production:8008/sse;
    #     # ... SSE configuration
    # }
}