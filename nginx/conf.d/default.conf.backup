# nginx/conf.d/default.conf

# HTTP server - redirect to HTTPS and handle Let's Encrypt
server {
    listen 80;
    listen [::]:80;
    server_name data.forensic-bot.com;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name data.forensic-bot.com;

    # SSL certificates from Let's Encrypt
    ssl_certificate /etc/letsencrypt/live/data.forensic-bot.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/data.forensic-bot.com/privkey.pem;
    
    # Include Let's Encrypt recommended settings
    # This file contains all necessary SSL configuration
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # =====================================
    # Root endpoint - Service information
    # =====================================
    location = / {
        add_header Content-Type application/json;
        return 200 '{
            "service": "Server",
            "status": "running"}';
    }
    # location = / {
    #     add_header Content-Type application/json;
    #     return 200 '{
    #         "service": "Server",
    #         "status": "running",
    #         "environments": {
    #             "demo": "https://data.forensic-bot.com/demo/sse",
    #             "production": "Coming soon",
    #             "marketing": "Coming soon",
    #             "finance": "Coming soon"
    #         },
    #         "health": "https://data.forensic-bot.com/demo/health"
    #     }';
    # }
    # # =====================================
    # DEMO Environment
    # https://data.forensic-bot.com/demo/sse
    # =====================================
    
    # Health check for demo
    location = /demo/health {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Environment-Path /demo;
    }
    
    # OAuth discovery endpoints for demo
    location ~ ^/demo/\.well-known/(oauth-authorization-server|oauth-protected-resource)$ {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Handle OAuth discovery with /sse suffix (Claude.ai quirk)
    location ~ ^/demo/\.well-known/(oauth-authorization-server|oauth-protected-resource)/sse$ {
        rewrite ^/demo/\.well-known/(.*)/sse$ /demo/.well-known/$1 redirect;
    }
    
    # Registration endpoint for demo
    location = /demo/register {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Authorization endpoint for demo
    location = /demo/authorize {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # Token endpoint for demo
    location = /demo/token {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }
    
    # SSE endpoint for demo - HEAD request
    location = /demo/sse {
        if ($request_method = HEAD) {
            add_header Content-Type text/event-stream;
            add_header Cache-Control no-cache;
            add_header X-Accel-Buffering no;
            add_header Access-Control-Allow-Origin * always;
            add_header X-MCP-Environment demo always;
            return 200;
        }
        
        # For GET and POST requests
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        
        # Critical for SSE/streaming
        proxy_http_version 1.1;
        
        # Clear connection header for SSE
        proxy_set_header Connection '';
        
        # Disable caching
        proxy_set_header Cache-Control 'no-cache';
        proxy_cache off;
        
        # Disable buffering for SSE - CRITICAL
        proxy_buffering off;
        chunked_transfer_encoding off;
        proxy_request_buffering off;
        
        # Very long timeout for persistent SSE connections
        proxy_read_timeout 24h;
        proxy_send_timeout 24h;
        send_timeout 24h;
        keepalive_timeout 24h;
        
        # SSE-specific headers
        proxy_set_header Accept text/event-stream;
        add_header Content-Type text/event-stream always;
        add_header Cache-Control 'no-cache' always;
        add_header X-Accel-Buffering 'no' always;
        add_header X-MCP-Environment 'demo' always;
        
        # Standard headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers for Claude.ai
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, HEAD, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Accept' always;
    }
    
    # Messages endpoint for demo
    location = /demo/messages {
        rewrite ^/demo(/.*)$ $1 break;
        proxy_pass http://mcp-server-demo:8008;
        
        proxy_http_version 1.1;
        proxy_set_header Connection '';
        
        # Disable buffering
        proxy_buffering off;
        proxy_cache off;
        
        # Timeouts
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Content-Type $content_type;
        proxy_set_header X-Environment-Path /demo;
        
        # CORS headers
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Authorization, Content-Type' always;
    }

    # =====================================
    # PLACEHOLDER FOR PRODUCTION (Future)
    # =====================================
    # When ready, uncomment and configure:
    #
    # location = /sse {
    #     proxy_pass http://mcp-server-production:8008/sse;
    #     # ... SSE configuration
    # }
    #
    # location = /health {
    #     proxy_pass http://mcp-server-production:8008/health;
    #     # ... proxy configuration
    # }
    #
    # location ~ ^/\.well-known/(oauth-authorization-server|oauth-protected-resource)$ {
    #     proxy_pass http://mcp-server-production:8008;
    #     # ... proxy configuration
    # }
    #
    # location = /register {
    #     proxy_pass http://mcp-server-production:8008/register;
    #     # ... proxy configuration
    # }
    #
    # location = /authorize {
    #     proxy_pass http://mcp-server-production:8008/authorize;
    #     # ... proxy configuration
    # }
    #
    # location = /token {
    #     proxy_pass http://mcp-server-production:8008/token;
    #     # ... proxy configuration
    # }

    # =====================================
    # PLACEHOLDER FOR MARKETING (Future)
    # =====================================
    # location /marketing/ {
    #     rewrite ^/marketing(/.*)$ $1 break;
    #     proxy_pass http://mcp-server-marketing:8008;
    #     # ... configuration
    # }

    # =====================================
    # PLACEHOLDER FOR FINANCE (Future)
    # =====================================
    # location /finance/ {
    #     rewrite ^/finance(/.*)$ $1 break;
    #     proxy_pass http://mcp-server-finance:8008;
    #     # ... configuration
    # }
}