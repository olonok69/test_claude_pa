#!/bin/bash
# Enhanced Setup Script for Company Classification CLI Tool with Server Selection

set -e

echo "üöÄ Setting up Enhanced Company Classification CLI Tool"
echo "===================================================="
echo "‚ú® Now with flexible server selection support!"
echo ""

# Check if we're in the right directory
if [ ! -d "client" ]; then
    echo "‚ùå Error: This script should be run from the root directory of the project"
    echo "   (the directory containing the 'client' folder)"
    exit 1
fi

# Check Python version
echo "üêç Checking Python version..."
python_version=$(python3 --version 2>&1 | cut -d' ' -f2)
echo "   Python version: $python_version"

# Check if required directories exist
echo "üìÅ Checking project structure..."
required_dirs=("client" "client/services" "client/utils" "client/mcp_servers")
for dir in "${required_dirs[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "‚ùå Error: Required directory not found: $dir"
        exit 1
    fi
done
echo "   ‚úÖ Project structure is valid"

# Check for environment file
echo "üîê Checking environment configuration..."
if [ ! -f ".env" ]; then
    echo "   ‚ö†Ô∏è  .env file not found, creating enhanced template..."
    cat > .env << 'EOF'
# AI Provider Configuration (choose one)
OPENAI_API_KEY=your_openai_api_key_here

# OR Azure OpenAI Configuration
AZURE_API_KEY=your_azure_api_key
AZURE_ENDPOINT=https://your-endpoint.openai.azure.com/
AZURE_DEPLOYMENT=your_deployment_name
AZURE_API_VERSION=2023-12-01-preview

# Google Search Configuration (required for --servers google or --servers both)
GOOGLE_API_KEY=your_google_api_key
GOOGLE_SEARCH_ENGINE_ID=your_custom_search_engine_id

# Perplexity Configuration (required for --servers perplexity or --servers both)
PERPLEXITY_API_KEY=your_perplexity_api_key
PERPLEXITY_MODEL=sonar

# SSL Configuration (Optional)
SSL_ENABLED=true
EOF
    echo "   üìù Created enhanced .env template with server-specific requirements"
else
    echo "   ‚úÖ .env file found"
fi

# Make CLI scripts executable
echo "üîß Setting up enhanced CLI scripts..."
chmod +x company_cli.py
chmod +x csv_processor_utility.py
echo "   ‚úÖ CLI scripts are now executable"

# Create enhanced CLI-specific server configuration
echo "‚öôÔ∏è  Creating enhanced CLI server configuration..."
cat > cli_servers_config.json << 'EOF'
{
  "mcpServers": {
    "Google Search": {
      "transport": "sse",
      "url": "http://localhost:8002/sse",
      "timeout": 600,
      "headers": null,
      "sse_read_timeout": 900
    },
    "Perplexity Search": {
      "transport": "sse",
      "url": "http://localhost:8001/sse",
      "timeout": 600,
      "headers": null,
      "sse_read_timeout": 900
    },
    "Company Tagging": {
      "transport": "stdio",
      "command": "python",
      "args": ["-m", "client.mcp_servers.company_tagging.server"],
      "env": {
        "PERPLEXITY_API_KEY": "${PERPLEXITY_API_KEY}",
        "PERPLEXITY_MODEL": "${PERPLEXITY_MODEL}"
      },
      "cwd": "."
    }
  }
}
EOF
echo "   ‚úÖ Created enhanced cli_servers_config.json"

# Create sample CSV
echo "üìä Creating sample CSV file..."
python3 -c "
import sys
sys.path.append('.')
from csv_processor_utility import EnhancedCSVProcessor
EnhancedCSVProcessor.generate_sample_csv('sample_companies.csv', 10)
" 2>/dev/null || python3 -c "
import sys
sys.path.append('.')
from csv_processor_utility import CSVProcessor
CSVProcessor.generate_sample_csv('sample_companies.csv', 10)
"

# Create enhanced batch processing script
echo "üìù Creating enhanced batch processing script..."
cat > batch_process.sh << 'EOF'
#!/bin/bash
# Enhanced Batch Processing Script with Server Selection
# Auto-generated by setup script

# Check if enhanced CLI is available
if [ ! -f "company_cli.py" ]; then
    echo "‚ùå Error: company_cli.py not found"
    exit 1
fi

# Use the enhanced batch script if available
if [ -f "enhanced_batch_process.sh" ]; then
    exec ./enhanced_batch_process.sh "$@"
else
    # Fallback to basic batch processing
    echo "‚ö†Ô∏è  Enhanced batch script not found, using basic version"
    
    if [ $# -lt 2 ]; then
        echo "Usage: $0 <input_csv> <output_directory> [batch_size] [servers]"
        echo "Servers: google, perplexity, both (default: both)"
        exit 1
    fi
    
    INPUT_CSV="$1"
    OUTPUT_DIR="$2"
    BATCH_SIZE="${3:-10}"
    SERVERS="${4:-both}"
    
    mkdir -p "$OUTPUT_DIR"
    
    OUTPUT_BASE="$OUTPUT_DIR/results_$(date +%Y%m%d_%H%M%S)"
    
    echo "üöÄ Running enhanced classification..."
    echo "   Input: $INPUT_CSV"
    echo "   Output: $OUTPUT_BASE"
    echo "   Servers: $SERVERS"
    echo "   Batch size: $BATCH_SIZE"
    
    python3 company_cli.py --input "$INPUT_CSV" --output "$OUTPUT_BASE" --servers "$SERVERS" --batch-size "$BATCH_SIZE"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Processing completed successfully!"
        echo "üìÑ Files created:"
        echo "   - ${OUTPUT_BASE}.md"
        echo "   - ${OUTPUT_BASE}.csv"
    else
        echo "‚ùå Processing failed!"
        exit 1
    fi
fi
EOF
chmod +x batch_process.sh

# Create server comparison script
echo "üìä Creating server comparison script..."
python3 -c "
import sys
sys.path.append('.')
try:
    from csv_processor_utility import EnhancedCSVProcessor
    EnhancedCSVProcessor.create_server_comparison_script('compare_servers.sh')
except ImportError:
    print('‚ö†Ô∏è  Enhanced CSV processor not available, skipping comparison script')
except Exception as e:
    print(f'‚ö†Ô∏è  Error creating comparison script: {e}')
"

# Test the enhanced CLI tool structure
echo "üß™ Testing enhanced CLI tool structure..."
python3 -c "
import sys
sys.path.append('./client')
try:
    from services.ai_service import create_llm_model
    from services.mcp_service import setup_mcp_client
    from services.chat_service import get_clean_conversation_memory
    print('   ‚úÖ All required modules can be imported')
except ImportError as e:
    print(f'   ‚ùå Import error: {e}')
    sys.exit(1)
"

# Test enhanced CSV processor
echo "üß™ Testing enhanced CSV processor..."
python3 -c "
import sys
sys.path.append('.')
try:
    from csv_processor_utility import EnhancedCSVProcessor
    # Test server validation
    valid, servers, errors = EnhancedCSVProcessor.validate_server_selection('both')
    if valid:
        print('   ‚úÖ Enhanced CSV processor is working')
    else:
        print(f'   ‚ùå CSV processor validation failed: {errors}')
except ImportError:
    print('   ‚ö†Ô∏è  Enhanced CSV processor not found, using basic version')
except Exception as e:
    print(f'   ‚ùå CSV processor error: {e}')
"

echo ""
echo "üéâ Enhanced setup completed successfully!"
echo ""
echo "üîß New Features:"
echo "‚ú® Flexible server selection (Google, Perplexity, or both)"
echo "‚ú® Enhanced batch processing with server-specific prompts"
echo "‚ú® Server comparison and performance reporting"
echo "‚ú® Environment validation for different server configurations"
echo ""
echo "üìã Next steps:"
echo "1. Install Python dependencies manually:"
echo "   pip3 install streamlit langchain-openai langchain-mcp-adapters langgraph python-dotenv aiohttp"
echo "2. Edit the .env file and add your API keys based on which servers you want to use"
echo "3. Start the MCP servers: docker-compose up mcpserver1 mcpserver2 -d"
echo "4. Test the enhanced CLI tool with server selection:"
echo ""
echo "üìñ Enhanced Usage Examples:"
echo ""
echo "# Test with both servers (default - recommended)"
echo "python3 company_cli.py --input sample_companies.csv --output test_results"
echo ""
echo "# Test with Google Search only"
echo "python3 company_cli.py --input sample_companies.csv --output test_google --servers google"
echo ""
echo "# Test with Perplexity only"
echo "python3 company_cli.py --input sample_companies.csv --output test_perplexity --servers perplexity"
echo ""
echo "# Compare all server configurations"
echo "./compare_servers.sh sample_companies.csv comparison_results"
echo ""
echo "# Use enhanced batch script"
echo "./batch_process.sh sample_companies.csv results 10 both"
echo ""
echo "üîç Environment Requirements by Server:"
echo ""
echo "üìä Always Required:"
echo "   - OPENAI_API_KEY (or Azure OpenAI credentials)"
echo ""
echo "üîç For Google Search (--servers google or --servers both):"
echo "   - GOOGLE_API_KEY"
echo "   - GOOGLE_SEARCH_ENGINE_ID"
echo ""
echo "üîÆ For Perplexity (--servers perplexity or --servers both):"
echo "   - PERPLEXITY_API_KEY"
echo ""
echo "üõ†Ô∏è  Available Tools:"
echo "   - company_cli.py: Enhanced classification with server selection"
echo "   - csv_processor_utility.py: Enhanced CSV processing and validation"
echo "   - batch_process.sh: Enhanced batch processing wrapper"
echo "   - compare_servers.sh: Server comparison tool"
echo "   - sample_companies.csv: Sample data for testing"
echo ""
echo "üìä Validation Commands:"
echo "   # Check CSV structure"
echo "   python3 csv_processor_utility.py --validate sample_companies.csv"
echo ""
echo "   # Check environment for specific servers"
echo "   python3 csv_processor_utility.py --check-env both"
echo "   python3 csv_processor_utility.py --check-env google"
echo "   python3 csv_processor_utility.py --check-env perplexity"
echo ""
echo "   # Validate server selection"
echo "   python3 csv_processor_utility.py --validate-servers both"
echo ""
echo "üìà Performance Analysis:"
echo "   # Generate performance report after running comparisons"
echo "   python3 csv_processor_utility.py --generate-report comparison_results --output performance_report.md"
echo ""
echo "For detailed help on any command, use: python3 command_name.py --help"
echo ""
echo "üéØ Quick Start Test:"
echo "   1. Fill in your API keys in .env"
echo "   2. Run: python3 company_cli.py --input sample_companies.csv --output quick_test --servers both"
echo "   3. Check results in quick_test.md and quick_test.csv"