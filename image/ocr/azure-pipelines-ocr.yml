# Docker
# Build and push OCR models to Azure Container Registry
name: $(MajorVersion).$(MinorVersion).$(PatchVersion).$(Rev:r)-$(Build.BuildId)

trigger:
  branches:
      include:
        - develop
  paths:
    include:
      - image/ocr/*

pr:
  branches: 
    include:
      - develop 
  paths:
    include:
      - image/ocr/*

resources:
  - repo: self

variables:
  # agents
  azure_build_Agent: "Azure Pipelines"
  Version: $(Build.BuildNumber)

  # Container registry service connection
  dockerRegistryServiceConnection: "b55a1ff0-774c-4842-8247-0fd90877ac37"
  imageRepository: "detectai"
  containerRegistry: "acrdetectaideveastus.azurecr.io"
  tag: "$(Build.BuildId)"

  # docker file paths
  dockerfilePath_ocr: "$(Build.SourcesDirectory)/image/ocr/app/Dockerfile"
  dockerfilePath_ocr_nats: "$(Build.SourcesDirectory)/image/ocr/app_nats/Dockerfile"

  # image Repositories
  imageRepository_ocr: "$(imageRepository)-ocr"
  imageRepository_ocr_nats: "$(imageRepository)-ocr-nats"

  # Build Variables 
  disable_tests: "false" # Set to 'true' to skip the unit tests
  use_no_cache: "false" # Set to 'true' to enable --no-cache which will build the docker images without cache

  # Sonar Cloud
  SonarCloud_Organization: "a5g3uqpot1ph"
  SonarCloud_ProjectName: "Detect-AI"
  SonarCloud_ProjectKey: "sceven_Detect-AI"

stages:
  - stage: Sonar_Analysis
    displayName: Sonar Analysis
    jobs:
      - job: Analyze
        displayName: Sonar Analysis
        pool: $(azure_build_Agent)
        steps:
          - checkout: self
            fetchDepth: 0

          - task: SonarCloudPrepare@3
            continueOnError: false
            inputs:
              SonarCloud: 'SonarCloud'
              organization: '$(SonarCloud_Organization)'
              scannerMode: 'CLI'
              configMode: 'file'
              extraProperties: |
                sonar.projectKey=$(SonarCloud_ProjectKey)
                sonar.organization=$(SonarCloud_Organization)

          - task: SonarCloudAnalyze@3
            continueOnError: false

          - task: SonarCloudPublish@3
            continueOnError: false
            inputs:
              pollingTimeoutSec: '300'

  - stage: Python_Integration_Tests
    displayName: Test Stage
    condition: eq(variables['disable_tests'], 'false')
    jobs:
      - job: RunUnitTests
        displayName: Run OCR Python Unit Tests
        pool: $(azure_build_Agent)
        steps:
          - checkout: self
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.10"
              addToPath: true

          # Add cache for pip with multiple requirements files
          - task: Cache@2
            inputs:
              key: 'pip | "$(Agent.OS)" | $(Build.SourcesDirectory)/tests/requirements.txt | $(Build.SourcesDirectory)/image/ocr/app_nats/requirements.txt | v1'
              restoreKeys: |
                pip | "$(Agent.OS)" | $(Build.SourcesDirectory)/tests/requirements.txt | $(Build.SourcesDirectory)/image/ocr/app_nats/requirements.txt
                pip | "$(Agent.OS)" | $(Build.SourcesDirectory)/tests/requirements.txt
                pip | "$(Agent.OS)"
              path: $(Pipeline.Workspace)/.pip          

          - script: |
              pip install --upgrade pip
              pip install --no-cache-dir -r $(Build.SourcesDirectory)/tests/requirements.txt --cache-dir $(Pipeline.Workspace)/.pip
              pip install --no-cache-dir -r $(Build.SourcesDirectory)/image/ocr/app_nats/requirements.txt --cache-dir $(Pipeline.Workspace)/.pip              
            displayName: Install Dependencies
            env:
              SPACY_DATA_PATH: $(Pipeline.Workspace)/.spacy

          - script: |
              python -m pytest tests -v -m "ocr"
            displayName: Run OCR Unit Tests

  - stage: Docker_OCR
    displayName: Docker OCR
    jobs:
      - job: Docker_Image_Builds_OCR
        displayName: Build and Push Docker OCR
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: $(azure_build_Agent)
        steps:
          - task: Docker@2
            displayName: 'docker build'
            inputs:
              command: build
              repository: $(imageRepository_ocr)
              dockerfile: $(dockerfilePath_ocr)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest
                $(Version)
              arguments: '--build-arg API_VERSION=$(Version)'

          - task: Docker@2
            displayName: 'docker push'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              command: 'push'
              repository: $(imageRepository_ocr)
              dockerfile: $(dockerfilePath_ocr)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest
                $(Version)
    dependsOn: Python_Integration_Tests
    
  - stage: Docker_OCR_NATS
    displayName: Docker OCR NATS
    jobs:
      - job: Docker_Image_Builds_OCR_NATS
        displayName: Build and Push Docker OCR NATS
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        pool: $(azure_build_Agent)
        steps:
          - task: Docker@2
            displayName: 'docker build'
            inputs:
              command: build
              repository: $(imageRepository_ocr_nats)
              dockerfile: $(dockerfilePath_ocr_nats)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest
                $(Version)
              arguments: '--build-arg API_VERSION=$(Version)'
              
          - task: Docker@2
            displayName: 'docker push'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              command: 'push'
              repository: $(imageRepository_ocr_nats)
              dockerfile: $(dockerfilePath_ocr_nats)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
                latest
                $(Version)
    dependsOn: Python_Integration_Tests